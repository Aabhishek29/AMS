schema{
    query: Query
    mutation: Mutation
}


type Query{
    allUsers(userId: String,phone: String,email: String,organizationEmail: String) : [Users]
    allAuthenticatedUsers : [Users]
    allAnoyUser(userId: String) : [AnoyUser]
    userDetails(appId: String, sessionListId: String, deactivateUser: String) : [UserDetails]
    sessionDetails : [SessionDetails]
    chatMessages : [ChatMessages]
    participants : [Participants]
}



type Mutation {

    createUsers(userName:String!,name:String!,email:String,password:String!,phone:String,organizationEmail:String,profileUrl:String) : Users
    createAnoyUser(userName: String, profileUrl : String, clientToken:String): AnoyUser
}

type AnoyUser {
    userId : String
    userName : String
    createdAt : String
    updatedAt : String
    profileUrl : String
    authenticated : Boolean
    clientToken : String
}

type Users {
    userName : String!,
    userId: String!,
    name:String!,
    email : String!,
    password : String!,
    phone : String,
    organizationEmail : String,
    createdAt : String,
    updatedAt: String,
    profileUrl : String,
    authenticated: String
    userDetails : [UserDetails]
}

type UserDetails {
    sessionListId : String!,
    createdAt : String!,
    updatedAt : String!,
    appId : String!,
    status : String,
    profileUrl : String,
    deactivateUser : String,
    sessionDetailsList : [SessionDetails]
}



type Participants {
    participantId : String,
    userId : String,
    sessionId : String
}

type SessionDetails {
    sessionId : String,
    createdAt : String,
    updatedAt : String,
    chatType : String,
    groupProfileUrl : String,
    connectionType : String,
    creator : String,
    participantsList : [Participants],
    chatMessagesId : [ChatMessages]
}

type ChatMessages {
    messageId : ID,
    message : String,
    mimeType : String,
    createdAt : String,
    sender : String,
    emotion : String,
    SessionDetails : SessionDetails
}